{
  "post": [
    {
      "name":"GULP",
      "image": "source/image/gulp.png",
      "url":"gulp",
      "note": "Gulp.js это потоковый сборщик проектов на JS.",
      "posts": [
        {
          "name":"gulp-uglify",
          "image": "source/image/gulp.png",
          "url":"gulp_uglify",
          "note": "<p>Вторая часть из цикла статей по архинужным плагинам и возможностям GULP.</p>\n<h3>Плагин номер два - gulp-uglify</h3>\n<p>Uglify - примерно переводится как уродование, а если учесть что код после обработки данным плагином совершенно не читаем, то название оправдывается.</p>\n<p>Так для чего создан этот плагин?<br>1.Для уменьшения веса файлов js(Сжатия происходит за счет исбавления от комментариев, переводов строк, сокращения до одной двух букв локальных переменных).<br>2.Для простой защиты информации(Точки остановки нельзя поставить в изуродованном файле, нельзя изменить значения переменных, нельзя при остановке произвести иньекцию данных в ajax запрос.). Это конечно первый уровень защиты, но для не подготовленного 'типа Хакера', это вас убережет.<br></p>\n<h3>Пример 1:</h3>\n<hljs lang=js>\n var uglify = require('gulp-uglify');\n gulp.task('uglify-task', function() {\n gulp.src(['js/scripts/page1.js','js/scripts/page2.js'])\n .pipe(concat('scripts.js'))\n .pipe(uglify())\n .pipe(gulp.dest('mini/'))\n });\n</hljs>\n<p>Данный пример хорошо показывает что нужно предпринять, что-бы изуродовать ваш код. %) Ничего делать почти не надо. Хотя Многие уже на этапе написания кода уродуют код так, что никакие плагины не нужны. %)</p>\n<p>К плюсам уродования можно относятся:<br>\n 1. Снижение веса.<br>\n 2. Защита информации.<br>\n</p>\n<p>К минусам:<br>\n 1. Нечитаемость кода.<br>\n 2. Дебагинг очень затруднен.<br>\n 3. Достаточно трудозатратная операция. Для примера файл весом около полумегабайта будет уродоваться 2-4 секунды<br>\n</p>\n<p>Используйте уродование на конечных этапах разработки проекта.</p>\n<p><strong>В заключении хочу сказать, плагин очень полезен, но не для всех проектов. Если у вас обширный проект, который поддерживается и все ещё находятся баги, не уродуйте скрипты.</strong></p>\n<p>Ссылка: <a href=https://github.com/terinjokes/gulp-uglify>https://github.com/terinjokes/gulp-uglify</a></p><p>\n</p><h4>С уважением, Николай.</h4>\n"
        },
        {
          "name":"gulp-concat",
          "image": "source/image/gulp.png",
          "url":"gulp_concat",
          "note": "<p>Сегодня я начинаю цикл статей по архинужным плагинам и возможностям GULP.</p>\n<h3>Плагин номер один - gulp-concat.</h3>\n<p>Как вы уже наверное догадались это плагин соединения нескольких разрозненных файлов в один. Синтаксис такой:</p>\n<h3>Пример 1:</h3><div hljs lang='js'>\n    gulp.task('first-task', function() {\n    gulp.src(['js/services/*.js'])\n    .pipe(concat('services.js'))\n    .pipe(gulp.dest('mini/'))\n    });\n</div>\n<p>Этот пример показывает что можно объединить в один файл все js-ы из папки services и положить их в папку мини. Это удобно когда в проекте постоянно добавляются новые файлы #js разбитые по папкам, их не нужно добавлять в html - и создавать простыню из скриптов</p>\n<h3>Пример 2:</h3>\n<div hljs lang='js'>\n    gulp.task('angular-task', function() {\n    gulp.src([\n    'components/lodash/dist/lodash.underscore.min.js',\n    'components/angular/angular.min.js',\n    'components/angular/angular-seo.js',\n    'components/angular/local.js',\n    'components/angular-route/angular-route.min.js',\n    'components/angular-resource/angular-resource.js'\n    ])\n    .pipe(concat('angular-core.js'))\n    .pipe(gulp.dest('mini/'))\n    });\n</div>\n<p>В данном примере показано создание ядра js приложения, те библиотеки и фреймворки которые обязательно должны загружаться. Они разбросаны по разным папкам, и это не проблема. Просто в src передайте массив, и они при соединении будут одним файлом. Осторожно! Не нарушайте последовательность! Если плагин предназначается для ангуляра, то он должен стоять после ангуляра, а не до.</p>\n<h3>Пример 3:</h3>\n<div hljs lang='js'>\n    gulp.task('compress', ['angular-task','first-task'], function() {\n    return gulp.src(['mini/angular-core.js','mini/services.js'])\n    .pipe(concat('scripts.min.js'))\n    .pipe(gulp.dest('mini'));\n    });\n</div>\n<p>В данном примере Квинтэссенция конкатинации!!! Мы сначала ждем исполнения тасков ('angular-task','first-task'), а потом собираем их в один большой файл!</p>\n<p>К плюсам конкатинации относятся:<br/>\n1. Запрос на сервере только одного файла. Что существенно снизит нагрузку на сервер.<br/>\n2. Избавление от портянки в html-е.<br/>\n3. Добавление файлов в уже используемую папку автоматически добавляет его к вам в приложение.<br/>\n</p>\n<p>К минусам:<br/>\n1. Некоторые сложности с дебагом, если вы при остановках привыкли использовать номер строки.\n</p><p><strong>В заключении хочу сказать, что это очень полезный плагин для любого фронт-енд разработчика, и его использование повысит скорость вашего проекта в разы (Реальный случай из моего проекта, около 40-ка файлов общим весом более полутора мегабайт подгружались 2.5 секунды, соединив их вместе скорость стала 0.75)</strong></p>\n<p>Ссылка: <a href='https://github.com/wearefractal/gulp-concat'>https://github.com/wearefractal/gulp-concat</a><p>\n<h4>С уважением, Николай.</h4>\n"
        }
      ]
    }
  ]
}